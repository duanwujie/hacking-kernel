

Epoll-From the kernel side

Some basics about I/O


What is I/O?
	The I/O is connecting the CPU to the outside world.
Three kinds of I/O
	.memory-mapped input/output
	.I/O-mapped input/output
	.direct memory access (DMA)
	
	
	
	PCI,ISA,EISA,Nubus..
		.PCI controller
	Interrupt Controller
		.Also an I/O device
		.some device is able to communicate it. and needless to talk about with CPU
	POLLED I/O
		.delay handle
	
	
	
I/O models-back to software world

	.Blocking I/O
		normal read/write/open ... system call
	.NON-Blocking I/O
		.fcntl/ioctl
	.IO-Mulitiplex
		.Select
	.Event driven
		.Epoll/kqueue
	.AIO
		.iocp
		
		
EPOLL
http://lxr.free-electrons.com/source/fs/eventpoll.c?v=4.3#L180

.kernel side
	eventpoll:main structure, epoll_create() makes
	epitem:wrap of a file,this struct in the RB trees.
	eppoll_entry:wait structure for poll hooks
	epoll_event:same as user space
.user space:
	.epoll_event like eventpoll above
	.epoll_data custom data area.

.why it works?
	kernel is event based,user space maybe not
.How it works?
	.add the fd to the epool by epoll_ctl()
	.use epool_wait() sleep to fish active fds
	.the interruption happen
	.send the active fds to the user space.
	.wake up the slept process
	
epoll internals

.fs/eventpoll.c	
	.epoll_ctl()->ep_insert()->ep_rbtree_insert()
.when we add an fd to a eventpoll,first initilate corresponding 
	structure:epitem
.setup some callback function for this file
.add the epitem to the rbtree.
Epoll internals-how to sleep
.two wait_queues
	.one for the process right now
	.one for the ksoftirqd
.epool_waite() system call
	.set the current process to TASK_INTERUPPTABLE
	.schedule()
.Work flow
.Interrupt handler
	.fd active
	.wait_queue#1 actived on ksoftirqd
	.epoll_callback() fired,active wait_queue#2
	.copies the ready fds to the user space
	.set the user process running
	.user process is scheduled, wake up!
	
	
	
struct eventpoll {
        /* Protect the access to this structure */
        spinlock_t lock;

        /*
         * This mutex is used to ensure that files are not removed
         * while epoll is using them. This is held during the event
         * collection loop, the file cleanup path, the epoll file exit
         * code and the ctl operations.
         */
        struct mutex mtx;

        /* Wait queue used by sys_epoll_wait() */
        wait_queue_head_t wq;

        /* Wait queue used by file->poll() */
        wait_queue_head_t poll_wait;

        /* List of ready file descriptors */
        struct list_head rdllist;

        /* RB tree root used to store monitored fd structs */
        struct rb_root rbr;

        /*
         * This is a single linked list that chains all the "struct epitem" that
         * happened while transferring ready events to userspace w/out
         * holding ->lock.
         */
        struct epitem *ovflist;

        /* wakeup_source used when ep_scan_ready_list is running */
        struct wakeup_source *ws;

        /* The user that created the eventpoll descriptor */
        struct user_struct *user;

        struct file *file;

        /* used to optimize loop detection check */
        int visited;
        struct list_head visited_list_link;
};



/*
  * Each file descriptor added to the eventpoll interface will
  * have an entry of this type linked to the "rbr" RB tree.
  * Avoid increasing the size of this struct, there can be many thousands
  * of these on a server and we do not want this to take another cache line.
  */
 struct epitem {
         union {
                 /* RB tree node links this structure to the eventpoll RB tree */
                 struct rb_node rbn;
                 /* Used to free the struct epitem */
                 struct rcu_head rcu;
         };
 
         /* List header used to link this structure to the eventpoll ready list */
         struct list_head rdllink;
 
         /*
          * Works together "struct eventpoll"->ovflist in keeping the
          * single linked chain of items.
          */
         struct epitem *next;
 
         /* The file descriptor information this item refers to */
         struct epoll_filefd ffd;
 
         /* Number of active wait queue attached to poll operations */
         int nwait;
 
         /* List containing poll wait queues */
         struct list_head pwqlist;
 
         /* The "container" of this item */
         struct eventpoll *ep;
 
         /* List header used to link this item to the "struct file" items list */
         struct list_head fllink;
 
         /* wakeup_source used when EPOLLWAKEUP is set */
         struct wakeup_source __rcu *ws;
 
         /* The structure that describe the interested events and the source fd */
         struct epoll_event event;
 };


 
 
#define SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)



#define SYSCALL_DEFINEx(x, sname, ...)                          \
         SYSCALL_METADATA(sname, x, __VA_ARGS__)                 \
         __SYSCALL_DEFINEx(x, sname, __VA_ARGS__)
 
 
 
 
#define SYSCALL_METADATA(sname, nb, ...)                        \
        static const char *types_##sname[] = {                  \
                __MAP(nb,__SC_STR_TDECL,__VA_ARGS__)            \
        };                                                      \
        static const char *args_##sname[] = {                   \
                __MAP(nb,__SC_STR_ADECL,__VA_ARGS__)            \
        };                                                      \
        SYSCALL_TRACE_ENTER_EVENT(sname);                       \
        SYSCALL_TRACE_EXIT_EVENT(sname);                        \
        static struct syscall_metadata __used                   \
          __syscall_meta_##sname = {                            \
                .name           = "sys"#sname,                  \
                .syscall_nr     = -1,   /* Filled in at boot */ \
                .nb_args        = nb,                           \
                .types          = nb ? types_##sname : NULL,    \
                .args           = nb ? args_##sname : NULL,     \
                .enter_event    = &event_enter_##sname,         \
                .exit_event     = &event_exit_##sname,          \
                .enter_fields   = LIST_HEAD_INIT(__syscall_meta_##sname.enter_fields), \
        };                                                      \
        static struct syscall_metadata __used                   \
          __attribute__((section("__syscalls_metadata")))       \
         *__p_syscall_meta_##sname = &__syscall_meta_##sname;
#else
#define SYSCALL_METADATA(sname, nb, ...)
#endif


#define __SYSCALL_DEFINEx(x, name, ...)                                 \
        asmlinkage long sys##name(__MAP(x,__SC_DECL,__VA_ARGS__))       \
                __attribute__((alias(__stringify(SyS##name))));         \
        static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__));  \
        asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__));      \
        asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__))       \
        {                                                               \
                long ret = SYSC##name(__MAP(x,__SC_CAST,__VA_ARGS__));  \
                __MAP(x,__SC_TEST,__VA_ARGS__);                         \
                __PROTECT(x, ret,__MAP(x,__SC_ARGS,__VA_ARGS__));       \
                return ret;                                             \
        }                                                               \
        static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__))
		
		
#define __SC_DECL(t, a) t a

#define __MAP0(m,...)
#define __MAP1(m,t,a) m(t,a)
#define __MAP2(m,t,a,...) m(t,a), __MAP1(m,__VA_ARGS__)
#define __MAP3(m,t,a,...) m(t,a), __MAP2(m,__VA_ARGS__)
#define __MAP4(m,t,a,...) m(t,a), __MAP3(m,__VA_ARGS__)
#define __MAP5(m,t,a,...) m(t,a), __MAP4(m,__VA_ARGS__)
#define __MAP6(m,t,a,...) m(t,a), __MAP5(m,__VA_ARGS__)
#define __MAP(n,...) __MAP##n(__VA_ARGS__)


SYSCALL_DEFINE1(epoll_create, int, size)
{
        if (size <= 0)
                return -EINVAL;

        return sys_epoll_create1(0);
}


        


int sys_epoll_create(int size)
{
        if (size <= 0)
                return -EINVAL;

        return sys_epoll_create1(0);
}

/* return fd */
int sys_epoll_create1(int flags)
{
        int error, fd;
        struct eventpoll *ep = NULL;
        struct file *file;

        /* Check the EPOLL_* constant for consistency.  */
        BUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);

        if (flags & ~EPOLL_CLOEXEC)
                return -EINVAL;
        /*
         * Create the internal data structure ("struct eventpoll").
         */
        error = ep_alloc(&ep);
        if (error < 0)
                return error;
        /*
         * Creates all the items needed to setup an eventpoll file. That is,
         * a file structure and a free file descriptor.
         */
        fd = get_unused_fd_flags(O_RDWR | (flags & O_CLOEXEC));
        if (fd < 0) {
                error = fd;
                goto out_free_ep;
        }
        file = anon_inode_getfile("[eventpoll]", &eventpoll_fops, ep,
                                 O_RDWR | (flags & O_CLOEXEC));
        if (IS_ERR(file)) {
                error = PTR_ERR(file);
                goto out_free_fd;
        }
        ep->file = file;
        fd_install(fd, file);
        return fd;

out_free_fd:
        put_unused_fd(fd);
out_free_ep:
        ep_free(ep);
        return error;
}

		

//usr spcace


#include <sys/epoll.h>


int main(int argc,char *argv[])
{
	int fd = epoll_create(0); //the param unused after linux 2.6
}


